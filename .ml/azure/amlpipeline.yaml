
# RunSubmissions are non - pipeline submissions which user wants to submit as part of his workflow
RunSubmissions:
  - name : "amlcomputeTraining"
    workspace: 'ashkumadevtestwkrspace'
    run_config_file: "./train-on-amlcompute/train1/run_config1.py" # this file represens the file which will return a submission object to submit. it can be anything like ScriptRun, Estimator etc.
    run_config_function : "main"
    # these values will be sent as input to the runConfig file, user may decide what to do with those params, if he has hardcoded all values then he need not to write these values,list is not restricted to this, user can define infinite list of inpute here  
    inputs : 
      compute : 'cpu-cluster'
      experiment : "train-aml-compute"  # at a time you can only submit to a single experiment
      source_directory: "./train-on-amlcompute/train1" # this represents the source directory where your runConfig file is present
      train_script : "train1.py"

  - name : "amlcomputeTraining2"
    workspace: 'ashkumadevtestwkrspace'
    run_config_file: "./train-on-amlcompute/train1/run_config1.py" # this file represens the file which will return a submission object to submit. it can be anything like ScriptRun, Estimator etc.
    run_config_function : "main"
    # these values will be sent as input to the runConfig file, user may decide what to do with those params, if he has hardcoded all values then he need not to write these values ,   
    inputs : 
      compute : 'cpu-cluster'
      experiment : "train-aml-compute"  # at a time you can only submit to a single experiment
      source_directory: "./train-on-amlcompute/train1" # this represents the source directory where your runConfig file is present
      train_script : "train2.py"
    
    

# defines the pipeline submissions user intend to do , if user gives a pipeline file, we load it directly, if user doesnt have pipeline file, still he wants to submit a pipeline, he can do by providing the steps.
PipelineSubmissions:
  - pipelineid: "vashjdkhasjkdhjs"
    pipeline_yamlFile : ""
    workspace: 'ashkumadevtestwkrspace'
    experiment : "train-aml-compute_pipeline"
    steps :
      - step_name : "train"
        pipelineStep_run_config_file: "./train-on-amlcompute/pipelinetrain/pipelineStepConfig1.py" # this file represens the file which will return a pipeline Step object to submit. it can be anything like PythonScriptStep, DataTransferStep, PythonScriptStep etc.
        run_config_function : "main"
        inputs :
          source_directory: "./train-on-amlcompute/pipelinetrain" # this represents the source directory where your runConfig file is present
          train_script : "train.py"
          compute : 'cpu-cluster'  # each step may occur on a new compute
          step_name : "train"

      - step_name : "compare"
        pipelineStep_run_config_file: "./train-on-amlcompute/pipelinetrain/pipelineStepConfig1.py" # this file represens the file which will return a pipeline Step object to submit. it can be anything like PythonScriptStep, DataTransferStep, PythonScriptStep etc.
        run_config_function : "main"
        inputs :
          source_directory: "./train-on-amlcompute/pipelinetrain" # this represents the source directory where your runConfig file is present
          train_script : "compare.py"
          compute : 'cpu-cluster'  # each step may occur on a new compute
          step_name : "compare"

      - step_name : "extract"
        pipelineStep_run_config_file: "./train-on-amlcompute/pipelinetrain/pipelineStepConfig2.py" # this file represens the file which will return a pipeline Step object to submit. it can be anything like PythonScriptStep, DataTransferStep, PythonScriptStep etc.
        run_config_function : "main"
        inputs :
          source_directory: "./train-on-amlcompute/pipelinetrain" # this represents the source directory where your runConfig file is present
          train_script : "extract.py"
          compute : 'cpu-cluster'  # each step may occur on a new compute
          step_name : "extract"

    binder:
      steps  : ['${{steps.1}}','${{steps.2}}']  # binder used for pipeline submission so giving user flexibility to decide his binding configuration
